# coding: utf-8

"""
    Analysis Specification for Meta-analysis

    api to create a meta-analysis specification

    The version of the OpenAPI document: 1.0
    Contact: jamesdkent21@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from neurosynth_compose_sdk.models.specification_return import SpecificationReturn

class TestSpecificationReturn(unittest.TestCase):
    """SpecificationReturn unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SpecificationReturn:
        """Test SpecificationReturn
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SpecificationReturn`
        """
        model = SpecificationReturn()
        if include_optional:
            return SpecificationReturn(
                type = '',
                estimator = neurosynth_compose_sdk.models.estimator.estimator(
                    type = 'MKDADensity', 
                    args = neurosynth_compose_sdk.models.args.args(), ),
                mask = '',
                conditions = None,
                weights = [
                    1.337
                    ],
                transformer = '',
                corrector = neurosynth_compose_sdk.models.corrector.corrector(
                    type = 'FWECorrector', 
                    args = neurosynth_compose_sdk.models.args.args(), ),
                filter = '',
                database_studyset = 'neurostore',
                id = '',
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                user = '',
                username = ''
            )
        else:
            return SpecificationReturn(
        )
        """

    def testSpecificationReturn(self):
        """Test SpecificationReturn"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
