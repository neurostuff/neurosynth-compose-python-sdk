# coding: utf-8

"""
    Analysis Specification for Meta-analysis

    api to create a meta-analysis specification  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: jamesdkent21@gmail.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from neurosynth_compose_sdk import schemas  # noqa: F401


class NeurovaultFile(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            collection_id = schemas.StrSchema
            
            
            class exception(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'exception':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class traceback(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'traceback':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            status = schemas.StrSchema
            file = schemas.StrSchema
            
            
            class image_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'image_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class map_type(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'map_type':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class cognitive_contrast_cogatlas(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cognitive_contrast_cogatlas':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class cognitive_contrast_cogatlas_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cognitive_contrast_cogatlas_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class cognitive_paradigm_cogatlas(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cognitive_paradigm_cogatlas':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class cognitive_paradigm_cogatlas_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cognitive_paradigm_cogatlas_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "collection_id": collection_id,
                "exception": exception,
                "traceback": traceback,
                "status": status,
                "file": file,
                "image_id": image_id,
                "name": name,
                "map_type": map_type,
                "cognitive_contrast_cogatlas": cognitive_contrast_cogatlas,
                "cognitive_contrast_cogatlas_id": cognitive_contrast_cogatlas_id,
                "cognitive_paradigm_cogatlas": cognitive_paradigm_cogatlas,
                "cognitive_paradigm_cogatlas_id": cognitive_paradigm_cogatlas_id,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collection_id"]) -> MetaOapg.properties.collection_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exception"]) -> MetaOapg.properties.exception: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["traceback"]) -> MetaOapg.properties.traceback: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["file"]) -> MetaOapg.properties.file: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_id"]) -> MetaOapg.properties.image_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["map_type"]) -> MetaOapg.properties.map_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cognitive_contrast_cogatlas"]) -> MetaOapg.properties.cognitive_contrast_cogatlas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cognitive_contrast_cogatlas_id"]) -> MetaOapg.properties.cognitive_contrast_cogatlas_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cognitive_paradigm_cogatlas"]) -> MetaOapg.properties.cognitive_paradigm_cogatlas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cognitive_paradigm_cogatlas_id"]) -> MetaOapg.properties.cognitive_paradigm_cogatlas_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["collection_id", "exception", "traceback", "status", "file", "image_id", "name", "map_type", "cognitive_contrast_cogatlas", "cognitive_contrast_cogatlas_id", "cognitive_paradigm_cogatlas", "cognitive_paradigm_cogatlas_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collection_id"]) -> typing.Union[MetaOapg.properties.collection_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exception"]) -> typing.Union[MetaOapg.properties.exception, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["traceback"]) -> typing.Union[MetaOapg.properties.traceback, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["file"]) -> typing.Union[MetaOapg.properties.file, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_id"]) -> typing.Union[MetaOapg.properties.image_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["map_type"]) -> typing.Union[MetaOapg.properties.map_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cognitive_contrast_cogatlas"]) -> typing.Union[MetaOapg.properties.cognitive_contrast_cogatlas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cognitive_contrast_cogatlas_id"]) -> typing.Union[MetaOapg.properties.cognitive_contrast_cogatlas_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cognitive_paradigm_cogatlas"]) -> typing.Union[MetaOapg.properties.cognitive_paradigm_cogatlas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cognitive_paradigm_cogatlas_id"]) -> typing.Union[MetaOapg.properties.cognitive_paradigm_cogatlas_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["collection_id", "exception", "traceback", "status", "file", "image_id", "name", "map_type", "cognitive_contrast_cogatlas", "cognitive_contrast_cogatlas_id", "cognitive_paradigm_cogatlas", "cognitive_paradigm_cogatlas_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        collection_id: typing.Union[MetaOapg.properties.collection_id, str, schemas.Unset] = schemas.unset,
        exception: typing.Union[MetaOapg.properties.exception, None, str, schemas.Unset] = schemas.unset,
        traceback: typing.Union[MetaOapg.properties.traceback, None, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        file: typing.Union[MetaOapg.properties.file, str, schemas.Unset] = schemas.unset,
        image_id: typing.Union[MetaOapg.properties.image_id, None, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, None, str, schemas.Unset] = schemas.unset,
        map_type: typing.Union[MetaOapg.properties.map_type, None, str, schemas.Unset] = schemas.unset,
        cognitive_contrast_cogatlas: typing.Union[MetaOapg.properties.cognitive_contrast_cogatlas, None, str, schemas.Unset] = schemas.unset,
        cognitive_contrast_cogatlas_id: typing.Union[MetaOapg.properties.cognitive_contrast_cogatlas_id, None, str, schemas.Unset] = schemas.unset,
        cognitive_paradigm_cogatlas: typing.Union[MetaOapg.properties.cognitive_paradigm_cogatlas, None, str, schemas.Unset] = schemas.unset,
        cognitive_paradigm_cogatlas_id: typing.Union[MetaOapg.properties.cognitive_paradigm_cogatlas_id, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NeurovaultFile':
        return super().__new__(
            cls,
            *_args,
            collection_id=collection_id,
            exception=exception,
            traceback=traceback,
            status=status,
            file=file,
            image_id=image_id,
            name=name,
            map_type=map_type,
            cognitive_contrast_cogatlas=cognitive_contrast_cogatlas,
            cognitive_contrast_cogatlas_id=cognitive_contrast_cogatlas_id,
            cognitive_paradigm_cogatlas=cognitive_paradigm_cogatlas,
            cognitive_paradigm_cogatlas_id=cognitive_paradigm_cogatlas_id,
            _configuration=_configuration,
            **kwargs,
        )
