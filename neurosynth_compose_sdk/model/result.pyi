# coding: utf-8

"""
    Analysis Specification for Meta-analysis

    api to create a meta-analysis specification  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: jamesdkent21@gmail.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from neurosynth_compose_sdk import schemas  # noqa: F401


class Result(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    describes the output of a meta-analysis
    """


    class MetaOapg:
        
        class properties:
            images = schemas.DictSchema
            meta_analysis_id = schemas.StrSchema
            
            
            class cli_version(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cli_version':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class neurostore_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'neurostore_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def neurovault_collection() -> typing.Type['NeurovaultCollection']:
                return NeurovaultCollection
            specification_snapshot = schemas.DictSchema
            studyset_snapshot = schemas.DictSchema
            annotation_snapshot = schemas.DictSchema
            __annotations__ = {
                "images": images,
                "meta_analysis_id": meta_analysis_id,
                "cli_version": cli_version,
                "neurostore_id": neurostore_id,
                "neurovault_collection": neurovault_collection,
                "specification_snapshot": specification_snapshot,
                "studyset_snapshot": studyset_snapshot,
                "annotation_snapshot": annotation_snapshot,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["images"]) -> MetaOapg.properties.images: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meta_analysis_id"]) -> MetaOapg.properties.meta_analysis_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cli_version"]) -> MetaOapg.properties.cli_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["neurostore_id"]) -> MetaOapg.properties.neurostore_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["neurovault_collection"]) -> 'NeurovaultCollection': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["specification_snapshot"]) -> MetaOapg.properties.specification_snapshot: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["studyset_snapshot"]) -> MetaOapg.properties.studyset_snapshot: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annotation_snapshot"]) -> MetaOapg.properties.annotation_snapshot: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["images", "meta_analysis_id", "cli_version", "neurostore_id", "neurovault_collection", "specification_snapshot", "studyset_snapshot", "annotation_snapshot", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["images"]) -> typing.Union[MetaOapg.properties.images, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meta_analysis_id"]) -> typing.Union[MetaOapg.properties.meta_analysis_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cli_version"]) -> typing.Union[MetaOapg.properties.cli_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["neurostore_id"]) -> typing.Union[MetaOapg.properties.neurostore_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["neurovault_collection"]) -> typing.Union['NeurovaultCollection', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["specification_snapshot"]) -> typing.Union[MetaOapg.properties.specification_snapshot, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["studyset_snapshot"]) -> typing.Union[MetaOapg.properties.studyset_snapshot, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annotation_snapshot"]) -> typing.Union[MetaOapg.properties.annotation_snapshot, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["images", "meta_analysis_id", "cli_version", "neurostore_id", "neurovault_collection", "specification_snapshot", "studyset_snapshot", "annotation_snapshot", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        images: typing.Union[MetaOapg.properties.images, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        meta_analysis_id: typing.Union[MetaOapg.properties.meta_analysis_id, str, schemas.Unset] = schemas.unset,
        cli_version: typing.Union[MetaOapg.properties.cli_version, None, str, schemas.Unset] = schemas.unset,
        neurostore_id: typing.Union[MetaOapg.properties.neurostore_id, None, str, schemas.Unset] = schemas.unset,
        neurovault_collection: typing.Union['NeurovaultCollection', schemas.Unset] = schemas.unset,
        specification_snapshot: typing.Union[MetaOapg.properties.specification_snapshot, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        studyset_snapshot: typing.Union[MetaOapg.properties.studyset_snapshot, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        annotation_snapshot: typing.Union[MetaOapg.properties.annotation_snapshot, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Result':
        return super().__new__(
            cls,
            *_args,
            images=images,
            meta_analysis_id=meta_analysis_id,
            cli_version=cli_version,
            neurostore_id=neurostore_id,
            neurovault_collection=neurovault_collection,
            specification_snapshot=specification_snapshot,
            studyset_snapshot=studyset_snapshot,
            annotation_snapshot=annotation_snapshot,
            _configuration=_configuration,
            **kwargs,
        )

from neurosynth_compose_sdk.model.neurovault_collection import NeurovaultCollection
