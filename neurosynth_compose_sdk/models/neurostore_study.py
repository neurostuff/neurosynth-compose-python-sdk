# coding: utf-8

"""
    Analysis Specification for Meta-analysis

    api to create a meta-analysis specification

    The version of the OpenAPI document: 1.0
    Contact: jamesdkent21@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from neurosynth_compose_sdk.models.neurostore_analysis import NeurostoreAnalysis
from typing import Optional, Set
from typing_extensions import Self

class NeurostoreStudy(BaseModel):
    """
    NeurostoreStudy
    """ # noqa: E501
    neurostore_id: Optional[StrictStr] = None
    analyses: Optional[List[NeurostoreAnalysis]] = None
    exception: Optional[StrictStr] = None
    traceback: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["neurostore_id", "analyses", "exception", "traceback", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NeurostoreStudy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "neurostore_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in analyses (list)
        _items = []
        if self.analyses:
            for _item_analyses in self.analyses:
                if _item_analyses:
                    _items.append(_item_analyses.to_dict())
            _dict['analyses'] = _items
        # set to None if neurostore_id (nullable) is None
        # and model_fields_set contains the field
        if self.neurostore_id is None and "neurostore_id" in self.model_fields_set:
            _dict['neurostore_id'] = None

        # set to None if exception (nullable) is None
        # and model_fields_set contains the field
        if self.exception is None and "exception" in self.model_fields_set:
            _dict['exception'] = None

        # set to None if traceback (nullable) is None
        # and model_fields_set contains the field
        if self.traceback is None and "traceback" in self.model_fields_set:
            _dict['traceback'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NeurostoreStudy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "neurostore_id": obj.get("neurostore_id"),
            "analyses": [NeurostoreAnalysis.from_dict(_item) for _item in obj["analyses"]] if obj.get("analyses") is not None else None,
            "exception": obj.get("exception"),
            "traceback": obj.get("traceback"),
            "status": obj.get("status")
        })
        return _obj


