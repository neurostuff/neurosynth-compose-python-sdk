# coding: utf-8

"""
    Analysis Specification for Meta-analysis

    api to create a meta-analysis specification  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: jamesdkent21@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, StrictStr
from neurosynth_compose_sdk.models.estimator import Estimator
from neurosynth_compose_sdk.models.neurovault_collection import NeurovaultCollection

class Result(BaseModel):
    """
    describes the output of a meta-analysis
    """
    images: Optional[Dict[str, Any]] = None
    meta_analysis_id: Optional[StrictStr] = None
    cli_version: Optional[StrictStr] = None
    estimator: Optional[Estimator] = None
    neurostore_id: Optional[StrictStr] = None
    neurovault_collection: Optional[NeurovaultCollection] = None
    __properties = ["images", "meta_analysis_id", "cli_version", "estimator", "neurostore_id", "neurovault_collection"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Result:
        """Create an instance of Result from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of estimator
        if self.estimator:
            _dict['estimator'] = self.estimator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of neurovault_collection
        if self.neurovault_collection:
            _dict['neurovault_collection'] = self.neurovault_collection.to_dict()
        # set to None if cli_version (nullable) is None
        # and __fields_set__ contains the field
        if self.cli_version is None and "cli_version" in self.__fields_set__:
            _dict['cli_version'] = None

        # set to None if neurostore_id (nullable) is None
        # and __fields_set__ contains the field
        if self.neurostore_id is None and "neurostore_id" in self.__fields_set__:
            _dict['neurostore_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Result:
        """Create an instance of Result from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Result.parse_obj(obj)

        _obj = Result.parse_obj({
            "images": obj.get("images"),
            "meta_analysis_id": obj.get("meta_analysis_id"),
            "cli_version": obj.get("cli_version"),
            "estimator": Estimator.from_dict(obj.get("estimator")) if obj.get("estimator") is not None else None,
            "neurostore_id": obj.get("neurostore_id"),
            "neurovault_collection": NeurovaultCollection.from_dict(obj.get("neurovault_collection")) if obj.get("neurovault_collection") is not None else None
        })
        return _obj

