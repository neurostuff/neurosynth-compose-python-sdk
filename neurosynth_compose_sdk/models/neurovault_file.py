# coding: utf-8

"""
    Analysis Specification for Meta-analysis

    api to create a meta-analysis specification  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: jamesdkent21@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr

class NeurovaultFile(BaseModel):
    """
    NeurovaultFile
    """
    collection_id: Optional[StrictStr] = None
    exception: Optional[StrictStr] = None
    traceback: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    image_id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    __properties = ["collection_id", "exception", "traceback", "status", "image_id", "name", "url"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NeurovaultFile:
        """Create an instance of NeurovaultFile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if collection_id (nullable) is None
        # and __fields_set__ contains the field
        if self.collection_id is None and "collection_id" in self.__fields_set__:
            _dict['collection_id'] = None

        # set to None if exception (nullable) is None
        # and __fields_set__ contains the field
        if self.exception is None and "exception" in self.__fields_set__:
            _dict['exception'] = None

        # set to None if traceback (nullable) is None
        # and __fields_set__ contains the field
        if self.traceback is None and "traceback" in self.__fields_set__:
            _dict['traceback'] = None

        # set to None if image_id (nullable) is None
        # and __fields_set__ contains the field
        if self.image_id is None and "image_id" in self.__fields_set__:
            _dict['image_id'] = None

        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        # set to None if url (nullable) is None
        # and __fields_set__ contains the field
        if self.url is None and "url" in self.__fields_set__:
            _dict['url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NeurovaultFile:
        """Create an instance of NeurovaultFile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NeurovaultFile.parse_obj(obj)

        _obj = NeurovaultFile.parse_obj({
            "collection_id": obj.get("collection_id"),
            "exception": obj.get("exception"),
            "traceback": obj.get("traceback"),
            "status": obj.get("status"),
            "image_id": obj.get("image_id"),
            "name": obj.get("name"),
            "url": obj.get("url")
        })
        return _obj

