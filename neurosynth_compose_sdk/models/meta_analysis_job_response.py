# coding: utf-8

"""
    Analysis Specification for Meta-analysis

    api to create a meta-analysis specification

    The version of the OpenAPI document: 1.0
    Contact: jamesdkent21@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from neurosynth_compose_sdk.models.meta_analysis_job_log import MetaAnalysisJobLog
from typing import Optional, Set
from typing_extensions import Self

class MetaAnalysisJobResponse(BaseModel):
    """
    MetaAnalysisJobResponse
    """ # noqa: E501
    job_id: Optional[StrictStr] = Field(default=None, description="Identifier returned by the compose runner service.")
    meta_analysis_id: Optional[StrictStr] = Field(default=None, description="Identifier of the meta-analysis that was submitted.")
    artifact_prefix: Optional[StrictStr] = Field(default=None, description="Artifact key prefix for logs and outputs.")
    status: Optional[StrictStr] = Field(default=None, description="Latest known status reported by the compose runner.")
    status_url: Optional[StrictStr] = Field(default=None, description="Convenience URL for polling job status.")
    environment: Optional[StrictStr] = Field(default=None, description="Deployment environment the job was submitted to.")
    no_upload: Optional[StrictBool] = Field(default=None, description="Indicates whether the upload step was skipped.")
    start_time: Optional[datetime] = Field(default=None, description="Start time reported by the compose runner status endpoint.")
    output: Optional[Dict[str, Any]] = Field(default=None, description="Raw output payload returned by the compose runner.")
    logs: Optional[List[MetaAnalysisJobLog]] = Field(default=None, description="Aggregated log events returned by the compose runner.")
    created_at: Optional[datetime] = Field(default=None, description="Timestamp when the job entry was cached.")
    updated_at: Optional[datetime] = Field(default=None, description="Timestamp when the job entry was last refreshed.")
    __properties: ClassVar[List[str]] = ["job_id", "meta_analysis_id", "artifact_prefix", "status", "status_url", "environment", "no_upload", "start_time", "output", "logs", "created_at", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetaAnalysisJobResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in logs (list)
        _items = []
        if self.logs:
            for _item_logs in self.logs:
                if _item_logs:
                    _items.append(_item_logs.to_dict())
            _dict['logs'] = _items
        # set to None if status_url (nullable) is None
        # and model_fields_set contains the field
        if self.status_url is None and "status_url" in self.model_fields_set:
            _dict['status_url'] = None

        # set to None if start_time (nullable) is None
        # and model_fields_set contains the field
        if self.start_time is None and "start_time" in self.model_fields_set:
            _dict['start_time'] = None

        # set to None if output (nullable) is None
        # and model_fields_set contains the field
        if self.output is None and "output" in self.model_fields_set:
            _dict['output'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetaAnalysisJobResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "job_id": obj.get("job_id"),
            "meta_analysis_id": obj.get("meta_analysis_id"),
            "artifact_prefix": obj.get("artifact_prefix"),
            "status": obj.get("status"),
            "status_url": obj.get("status_url"),
            "environment": obj.get("environment"),
            "no_upload": obj.get("no_upload"),
            "start_time": obj.get("start_time"),
            "output": obj.get("output"),
            "logs": [MetaAnalysisJobLog.from_dict(_item) for _item in obj["logs"]] if obj.get("logs") is not None else None,
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


