# coding: utf-8

"""
    Analysis Specification for Meta-analysis

    api to create a meta-analysis specification  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: jamesdkent21@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, constr

class Corrector(BaseModel):
    """
    The function/class applying statistical adjustments to the output of the meta-analysis (optional).
    """
    type: Optional[constr(strict=True, min_length=1)] = Field(None, description="the name of the function/class performing the correction. For example FWECorrector from NiMARE would be valid.")
    args: Optional[Dict[str, Any]] = Field(None, description="key word arguments passed to the corrector to modidy default functionality, such as number of iterations, or the particular method of correction being applied.")
    __properties = ["type", "args"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Corrector:
        """Create an instance of Corrector from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Corrector:
        """Create an instance of Corrector from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Corrector.parse_obj(obj)

        _obj = Corrector.parse_obj({
            "type": obj.get("type"),
            "args": obj.get("args")
        })
        return _obj

