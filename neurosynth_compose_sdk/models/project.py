# coding: utf-8

"""
    Analysis Specification for Meta-analysis

    api to create a meta-analysis specification  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: jamesdkent21@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, StrictStr, conlist
from neurosynth_compose_sdk.models.project_meta_analyses_inner import ProjectMetaAnalysesInner

class Project(BaseModel):
    """
    Project
    """
    provenance: Optional[Dict[str, Any]] = None
    meta_analyses: Optional[conlist(ProjectMetaAnalysesInner)] = None
    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    __properties = ["provenance", "meta_analyses", "name", "description"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Project:
        """Create an instance of Project from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in meta_analyses (list)
        _items = []
        if self.meta_analyses:
            for _item in self.meta_analyses:
                if _item:
                    _items.append(_item.to_dict())
            _dict['meta_analyses'] = _items
        # set to None if provenance (nullable) is None
        # and __fields_set__ contains the field
        if self.provenance is None and "provenance" in self.__fields_set__:
            _dict['provenance'] = None

        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Project:
        """Create an instance of Project from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Project.parse_obj(obj)

        _obj = Project.parse_obj({
            "provenance": obj.get("provenance"),
            "meta_analyses": [ProjectMetaAnalysesInner.from_dict(_item) for _item in obj.get("meta_analyses")] if obj.get("meta_analyses") is not None else None,
            "name": obj.get("name"),
            "description": obj.get("description")
        })
        return _obj

