# coding: utf-8

"""
    Analysis Specification for Meta-analysis

    api to create a meta-analysis specification

    The version of the OpenAPI document: 1.0
    Contact: jamesdkent21@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from neurosynth_compose_sdk.models.meta_analysis_annotation import MetaAnalysisAnnotation
from neurosynth_compose_sdk.models.meta_analysis_results import MetaAnalysisResults
from neurosynth_compose_sdk.models.meta_analysis_specification import MetaAnalysisSpecification
from neurosynth_compose_sdk.models.meta_analysis_studyset import MetaAnalysisStudyset
from neurosynth_compose_sdk.models.neurostore_analysis import NeurostoreAnalysis
from typing import Optional, Set
from typing_extensions import Self

class MetaAnalysisReturn(BaseModel):
    """
    MetaAnalysisReturn
    """ # noqa: E501
    specification: Optional[MetaAnalysisSpecification] = None
    studyset: Optional[MetaAnalysisStudyset] = None
    annotation: Optional[MetaAnalysisAnnotation] = None
    name: Optional[StrictStr] = Field(default=None, description="Human-readable name of the meta-analysis.")
    description: Optional[StrictStr] = Field(default=None, description="Long form description of the meta-analysis.")
    cached_studyset_id: Optional[StrictStr] = Field(default=None, description="The id of the studyset on neurosynth-compose (as opposed to the id of the studyset on neurostore). Multiple snapshots of the studyset can be stored on neurosynth-compose so knowing which snapshot is being referenced is necessary.")
    cached_annotation_id: Optional[StrictStr] = Field(default=None, description="The id of the annotation on neurosynth-compose (as opposed to the id of the annotation on neurostore). Multiple snapshots of the annotation can be stored on neurosynth-compose so knowing which snapshot is being referenced is necessary.")
    results: Optional[MetaAnalysisResults] = None
    provenance: Optional[Dict[str, Any]] = None
    project: Optional[StrictStr] = None
    run_key: Optional[StrictStr] = Field(default=None, description="a special key used to upload the results of this meta analysis. Can be used as an alternative to using your auth token from login. ")
    neurostore_analysis: Optional[NeurostoreAnalysis] = None
    cognitive_contrast_cogatlas: Optional[StrictStr] = None
    cognitive_contrast_cogatlas_id: Optional[StrictStr] = None
    cognitive_paradigm_cogatlas: Optional[StrictStr] = None
    cognitive_paradigm_cogatlas_id: Optional[StrictStr] = None
    cached_studyset: Optional[StrictStr] = None
    cached_annotation: Optional[StrictStr] = None
    neurostore_url: Optional[StrictStr] = None
    id: Optional[StrictStr] = Field(default=None, description="the identifier for the resource.")
    updated_at: Optional[datetime] = Field(default=None, description="when the resource was last modified.")
    created_at: Optional[datetime] = Field(default=None, description="When the resource was created.")
    user: Optional[StrictStr] = Field(default=None, description="Who owns the resource.")
    username: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["specification", "studyset", "annotation", "name", "description", "cached_studyset_id", "cached_annotation_id", "results", "provenance", "project", "run_key", "neurostore_analysis", "cognitive_contrast_cogatlas", "cognitive_contrast_cogatlas_id", "cognitive_paradigm_cogatlas", "cognitive_paradigm_cogatlas_id", "cached_studyset", "cached_annotation", "neurostore_url", "id", "updated_at", "created_at", "user", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetaAnalysisReturn from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "run_key",
            "cached_studyset",
            "cached_annotation",
            "neurostore_url",
            "updated_at",
            "created_at",
            "username",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of specification
        if self.specification:
            _dict['specification'] = self.specification.to_dict()
        # override the default output from pydantic by calling `to_dict()` of studyset
        if self.studyset:
            _dict['studyset'] = self.studyset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of annotation
        if self.annotation:
            _dict['annotation'] = self.annotation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of results
        if self.results:
            _dict['results'] = self.results.to_dict()
        # override the default output from pydantic by calling `to_dict()` of neurostore_analysis
        if self.neurostore_analysis:
            _dict['neurostore_analysis'] = self.neurostore_analysis.to_dict()
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if provenance (nullable) is None
        # and model_fields_set contains the field
        if self.provenance is None and "provenance" in self.model_fields_set:
            _dict['provenance'] = None

        # set to None if project (nullable) is None
        # and model_fields_set contains the field
        if self.project is None and "project" in self.model_fields_set:
            _dict['project'] = None

        # set to None if cognitive_contrast_cogatlas (nullable) is None
        # and model_fields_set contains the field
        if self.cognitive_contrast_cogatlas is None and "cognitive_contrast_cogatlas" in self.model_fields_set:
            _dict['cognitive_contrast_cogatlas'] = None

        # set to None if cognitive_contrast_cogatlas_id (nullable) is None
        # and model_fields_set contains the field
        if self.cognitive_contrast_cogatlas_id is None and "cognitive_contrast_cogatlas_id" in self.model_fields_set:
            _dict['cognitive_contrast_cogatlas_id'] = None

        # set to None if cognitive_paradigm_cogatlas (nullable) is None
        # and model_fields_set contains the field
        if self.cognitive_paradigm_cogatlas is None and "cognitive_paradigm_cogatlas" in self.model_fields_set:
            _dict['cognitive_paradigm_cogatlas'] = None

        # set to None if cognitive_paradigm_cogatlas_id (nullable) is None
        # and model_fields_set contains the field
        if self.cognitive_paradigm_cogatlas_id is None and "cognitive_paradigm_cogatlas_id" in self.model_fields_set:
            _dict['cognitive_paradigm_cogatlas_id'] = None

        # set to None if cached_studyset (nullable) is None
        # and model_fields_set contains the field
        if self.cached_studyset is None and "cached_studyset" in self.model_fields_set:
            _dict['cached_studyset'] = None

        # set to None if cached_annotation (nullable) is None
        # and model_fields_set contains the field
        if self.cached_annotation is None and "cached_annotation" in self.model_fields_set:
            _dict['cached_annotation'] = None

        # set to None if neurostore_url (nullable) is None
        # and model_fields_set contains the field
        if self.neurostore_url is None and "neurostore_url" in self.model_fields_set:
            _dict['neurostore_url'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        # set to None if user (nullable) is None
        # and model_fields_set contains the field
        if self.user is None and "user" in self.model_fields_set:
            _dict['user'] = None

        # set to None if username (nullable) is None
        # and model_fields_set contains the field
        if self.username is None and "username" in self.model_fields_set:
            _dict['username'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetaAnalysisReturn from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "specification": MetaAnalysisSpecification.from_dict(obj["specification"]) if obj.get("specification") is not None else None,
            "studyset": MetaAnalysisStudyset.from_dict(obj["studyset"]) if obj.get("studyset") is not None else None,
            "annotation": MetaAnalysisAnnotation.from_dict(obj["annotation"]) if obj.get("annotation") is not None else None,
            "name": obj.get("name"),
            "description": obj.get("description"),
            "cached_studyset_id": obj.get("cached_studyset_id"),
            "cached_annotation_id": obj.get("cached_annotation_id"),
            "results": MetaAnalysisResults.from_dict(obj["results"]) if obj.get("results") is not None else None,
            "provenance": obj.get("provenance"),
            "project": obj.get("project"),
            "run_key": obj.get("run_key"),
            "neurostore_analysis": NeurostoreAnalysis.from_dict(obj["neurostore_analysis"]) if obj.get("neurostore_analysis") is not None else None,
            "cognitive_contrast_cogatlas": obj.get("cognitive_contrast_cogatlas"),
            "cognitive_contrast_cogatlas_id": obj.get("cognitive_contrast_cogatlas_id"),
            "cognitive_paradigm_cogatlas": obj.get("cognitive_paradigm_cogatlas"),
            "cognitive_paradigm_cogatlas_id": obj.get("cognitive_paradigm_cogatlas_id"),
            "cached_studyset": obj.get("cached_studyset"),
            "cached_annotation": obj.get("cached_annotation"),
            "neurostore_url": obj.get("neurostore_url"),
            "id": obj.get("id"),
            "updated_at": obj.get("updated_at"),
            "created_at": obj.get("created_at"),
            "user": obj.get("user"),
            "username": obj.get("username")
        })
        return _obj


