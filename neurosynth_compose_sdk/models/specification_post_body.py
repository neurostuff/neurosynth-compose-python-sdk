# coding: utf-8

"""
    Analysis Specification for Meta-analysis

    api to create a meta-analysis specification

    The version of the OpenAPI document: 1.0
    Contact: jamesdkent21@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from neurosynth_compose_sdk.models.corrector import Corrector
from neurosynth_compose_sdk.models.estimator import Estimator
from neurosynth_compose_sdk.models.specification_conditions import SpecificationConditions
from typing import Optional, Set
from typing_extensions import Self

class SpecificationPostBody(BaseModel):
    """
    SpecificationPostBody
    """ # noqa: E501
    type: Optional[StrictStr] = Field(default=None, description="the type of meta-analysis being run, typically either cbma or ibma, but others may become available in the future.")
    estimator: Optional[Estimator] = None
    mask: Optional[StrictStr] = Field(default=None, description="a string representing a binary nifti file to select which voxels a user wants to include in the analysis.")
    conditions: Optional[SpecificationConditions] = None
    weights: Optional[List[Union[StrictFloat, StrictInt]]] = None
    transformer: Optional[StrictStr] = Field(default=None, description="A transformation applied to column(s) (e.g., binarize based on a threshold). This is likely to become deprecated.")
    corrector: Optional[Corrector] = None
    filter: Optional[StrictStr] = Field(default=None, description="a column from annotations selecting which analyses to include in the meta-analysis")
    database_studyset: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["type", "estimator", "mask", "conditions", "weights", "transformer", "corrector", "filter", "database_studyset"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SpecificationPostBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of estimator
        if self.estimator:
            _dict['estimator'] = self.estimator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of conditions
        if self.conditions:
            _dict['conditions'] = self.conditions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of corrector
        if self.corrector:
            _dict['corrector'] = self.corrector.to_dict()
        # set to None if mask (nullable) is None
        # and model_fields_set contains the field
        if self.mask is None and "mask" in self.model_fields_set:
            _dict['mask'] = None

        # set to None if weights (nullable) is None
        # and model_fields_set contains the field
        if self.weights is None and "weights" in self.model_fields_set:
            _dict['weights'] = None

        # set to None if transformer (nullable) is None
        # and model_fields_set contains the field
        if self.transformer is None and "transformer" in self.model_fields_set:
            _dict['transformer'] = None

        # set to None if corrector (nullable) is None
        # and model_fields_set contains the field
        if self.corrector is None and "corrector" in self.model_fields_set:
            _dict['corrector'] = None

        # set to None if filter (nullable) is None
        # and model_fields_set contains the field
        if self.filter is None and "filter" in self.model_fields_set:
            _dict['filter'] = None

        # set to None if database_studyset (nullable) is None
        # and model_fields_set contains the field
        if self.database_studyset is None and "database_studyset" in self.model_fields_set:
            _dict['database_studyset'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SpecificationPostBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "estimator": Estimator.from_dict(obj["estimator"]) if obj.get("estimator") is not None else None,
            "mask": obj.get("mask"),
            "conditions": SpecificationConditions.from_dict(obj["conditions"]) if obj.get("conditions") is not None else None,
            "weights": obj.get("weights"),
            "transformer": obj.get("transformer"),
            "corrector": Corrector.from_dict(obj["corrector"]) if obj.get("corrector") is not None else None,
            "filter": obj.get("filter"),
            "database_studyset": obj.get("database_studyset")
        })
        return _obj


